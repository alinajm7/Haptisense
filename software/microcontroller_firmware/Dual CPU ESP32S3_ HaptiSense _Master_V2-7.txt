#include <Arduino.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <freertos/semphr.h>
#include "esp_task_wdt.h"
// General Setup
constexpr int BaudRate = 250000; // Baud rate of serial port
constexpr int NumberOfPins = 29; // Number of pins that is used
constexpr int MAX_INPUT_LENGTH = 583; // Maximum input length, (((5 chars for lowStateDuration + 5 chars for highStateDuration)  * 29 pins) = 290) * 2 = 580  + 1 starting char "@" + 1 ending char "#" + 1 for  \n newline
constexpr int DATA_CHUNK_LENGTH = 290; // Length of each data chunk (5 chars for lowStateDuration + 5 chars for highStateDuration)  * 29 pins) = 290)
constexpr char START_CHAR = '@';
constexpr char END_CHAR = '#';
constexpr char START_CHAR_DataToSlave = 'A';
constexpr char END_CHAR_DataToSlave = 'E';
constexpr unsigned long MinDuration = 1;      //       1 microseconds = 0.001 milliseconds = 0.000001 Sec
constexpr unsigned long MaxDuration = 99999;  // 100,000 microseconds =   100 milliseconds = 0.1 Sec  (Almost)

// Used GPIO pins on ESP32-S3
constexpr int pins[NumberOfPins] = { 1, 2, 3, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 26, 47, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46 };
struct pwmConfig {
  unsigned long lowStateDuration;
  unsigned long stateDuration;
  unsigned long lastActionCycleTime;
  bool pinLockState;
};

// Initialize all pins with the default configuration
pwmConfig PWM_Config[NumberOfPins] = {
  { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }
};

bool pinState[NumberOfPins] = { false };

bool MPSON = true;

static char inputBuffer[MAX_INPUT_LENGTH];
static int bufferPosition = 0;

void setup() {
  // Set the CPU frequency to the highest available
  //setCpuFrequencyMhz(240);
  esp_task_wdt_init(4240, false);
  
  
  Serial.begin(BaudRate);
  InitializeAllPinsForMaster();
  Initiate4BitComInMaster();
  SetAllPinsLOW();

  //serialSemaphore = xSemaphoreCreateMutex();  // Create a semaphore for serial port access and shared index   (FOR shared part between Core 0 & 1)
  delay(500);
  xTaskCreatePinnedToCore(pWMSimulator, "PWMSimulator", 8192, NULL, configMAX_PRIORITIES - 1, NULL, 0);  // Task on Core 0
  // Info
  Serial.println(" ");
  Serial.println("HaptiSense V2.04 by AliNK");
  Serial.println("Type of connected board : MASTER");
  Serial.println("Actuators Processing is ON. It can be turned ON and Off through command @B# and @F#");
}

void pWMSimulator(void* parameter) {  // Core 0
  while (true) {
    if (!MPSON) {
            ets_delay_us(1); // Minimal delay to prevent busy-waiting
            continue;        // Skip processing
        }
    RunLogicsForPWM();
    //vTaskDelay(1);  //This is 1 milli second delay
    ets_delay_us(1);  //This is 1 micro second delay
    esp_task_wdt_reset();        
  }
}

void loop() {  // Core 1 by default

  // Check if there is any serial input to process
  while (Serial.available() > 0) {
    char inChar = Serial.read();
    // Check for newline character or carriage return
    if (inChar == '\n' || bufferPosition >= MAX_INPUT_LENGTH - 1) {
      inputBuffer[bufferPosition] = '\0';  // Null-terminate the string
      handleSerialInput(inputBuffer);
      bufferPosition = 0;                        // Reset buffer position
      memset(inputBuffer, 0, MAX_INPUT_LENGTH);  // Clear the buffer to avoid data remnants
    } else if (inChar != '\r') {
      inputBuffer[bufferPosition++] = inChar;
    }
  }
esp_task_wdt_reset();
  //RunLogicsForPWM();
}

void InitializeAllPinsForMaster() {  // Set all pins as Output to control Actuators
                                     // Set all pins to OUTPUT and LOW
  for (int i = 0; i < NumberOfPins; i++) {
    pinMode(pins[i], OUTPUT);
  }
}

void SetAllPinsLOW() {
  // Set all pins to OUTPUT and LOW
  for (int i = 0; i < NumberOfPins; i++) {
    digitalWrite(pins[i], LOW);
  }
}

// Core 0 related Methods
void RunLogicsForPWM() {
    

    unsigned long currentTime = micros();

    for (int i = 0; i < NumberOfPins; i++) {
        pwmConfig& pinConfig = PWM_Config[i]; // Cache the reference

        if (pinConfig.pinLockState || pinConfig.stateDuration == 0) {
            if (pinState[i]) {
                digitalWrite(pins[i], LOW);
                pinState[i] = false;
            }
            continue; // Skip to the next pin
        }

        unsigned long elapsedTime = currentTime - pinConfig.lastActionCycleTime;

        if (!pinState[i]) {
            if (elapsedTime >= pinConfig.lowStateDuration) {
                digitalWrite(pins[i], HIGH);
                pinState[i] = true;
            }
        } else {
            if (elapsedTime >= pinConfig.stateDuration) {
                digitalWrite(pins[i], LOW);
                pinState[i] = false;
                pinConfig.lastActionCycleTime = currentTime;
            }
        }
    }
}



// Core 1 related Methods (reading from port happens here, LOOP)

void handleSerialInput(char* input) {
  int inputLength = strlen(input);
  if (input[inputLength - 1] == '\n') {
    input[--inputLength] = '\0';  // Adjust length and remove newline
  }

  if (input[0] == '@' && input[inputLength - 1] == '#') {
    // Properly formatted input
    input[inputLength - 1] = '\0';  // Remove the ending character '#'
    char* coreInput = input + 1;    // Skip the starting character '@'

    if (strcmp(coreInput, "B") == 0) {
      sendCharsToSlave("ABE", 4);  // "B" is Command for Turning ON Process. "A" and "E" are Starting and Ending Char for Slave
      MPSON = true;
      Serial.println("Receiving Data is ON");
    } else if (strcmp(coreInput, "F") == 0) {
      sendCharsToSlave("AFE", 4);  // "F" is Command for Turning OFF Process. "A" and "E" are Starting and Ending Char for Slave
      MPSON = false;
      SetAllPinsLOW();
      Serial.println("Receiving Data is OFF");
    } else if (strlen(coreInput) == 2 * DATA_CHUNK_LENGTH) {  // Check core content length without '@' and '#'
      char localData[DATA_CHUNK_LENGTH + 1];                  // Buffer for Local Data
      char slaveData[DATA_CHUNK_LENGTH + 3];                  // Buffer for Slave Data with new begining and ending chars

      strncpy(localData, coreInput, DATA_CHUNK_LENGTH);
      localData[DATA_CHUNK_LENGTH] = '\0';  // Ensure null termination

      // Prepare slaveData
      slaveData[0] = START_CHAR_DataToSlave;
      strncpy(slaveData + 1, coreInput + DATA_CHUNK_LENGTH, DATA_CHUNK_LENGTH);
      slaveData[DATA_CHUNK_LENGTH + 1] = END_CHAR_DataToSlave;
      slaveData[DATA_CHUNK_LENGTH + 2] = '\0';  // Ensure null termination

      sendCharsToSlave(slaveData, DATA_CHUNK_LENGTH + 3);
      processLocalData(localData);
    } else {
      Serial.print("Number of received data: ");
      Serial.print(strlen(coreInput));
      Serial.println(" : Invalid PWM data length for 58 Actuators. Each actuator need 5 digits to indicate Low-time and 5 digits to indicate High-time (580 numeric chars + @ & #).");
      
    }
  } else {
    Serial.println("Invalid input format. Expecting '@' start and '#' end.");
  }
}

void processLocalData(char* localInput) {
  for (int i = 0; i < NumberOfPins; i++) {
    int index = i * 10;
    char lowDurationStr[6] = { 0 };
    char highDurationStr[6] = { 0 };

    strncpy(lowDurationStr, localInput + index, 5);
    strncpy(highDurationStr, localInput + index + 5, 5);

    unsigned long lowDuration = strtoul(lowDurationStr, NULL, 10);
    unsigned long highDuration = strtoul(highDurationStr, NULL, 10);

    if (lowDuration == 0 || highDuration == 0) {
      PWM_Config[i].pinLockState = true;
      // Handle invalid input by setting durations to zero and turning off the pin
      PWM_Config[i].lowStateDuration = 0;
      PWM_Config[i].stateDuration = 0;
      //digitalWrite(pins[i], LOW);
      //pinState[i] = false;                // Ensure state array is updated
      PWM_Config[i].lastActionCycleTime = micros();  // Reset timing

      // Serial.print("Invalid input for pin ");
      // Serial.print(i);
      // Serial.println(". PWM disabled, values must be within range.");

      PWM_Config[i].pinLockState = false;

    } else if (lowDuration >= MinDuration && lowDuration <= MaxDuration && highDuration >= 0 && highDuration <= MaxDuration) {
      PWM_Config[i].pinLockState = true;
      PWM_Config[i].lowStateDuration = lowDuration;
      PWM_Config[i].stateDuration = lowDuration + highDuration;
      //PWM_Config[i].lastActionCycleTime = micros();

      // Serial.print("Pin ");
      // Serial.print(i);
      // Serial.print(" set: Low = ");
      // Serial.print(lowDuration);
      // Serial.print(", High = ");
      // Serial.println(highDuration);
      PWM_Config[i].pinLockState = false;
    } else {
      PWM_Config[i].pinLockState = true;
      // Handle invalid input by setting durations to zero and turning off the pin
      PWM_Config[i].lowStateDuration = 0;
      PWM_Config[i].stateDuration = 0;
      //digitalWrite(pins[i], LOW);
      //pinState[i] = false;                // Ensure state array is updated
      PWM_Config[i].lastActionCycleTime = micros();  // Reset timing

      // Serial.print("Invalid input for pin ");
      // Serial.print(i);
      // Serial.println(". PWM disabled, values must be within range.");

      PWM_Config[i].pinLockState = false;
    }
  }
}



// Data Transsision scripts

// Define pin numbers
constexpr int CLOCK_PIN = 12;                    // GPIO Pin for the clock
constexpr int DATA_Transmission_STATE_PIN = 10;  // GPIO Pin to indicate it is data transmission mode
constexpr int DATA_PINS[] = { 9, 11, 14, 13 };   // GPIO Pins for 4-bit data *** Pin 13 is conencted to pin 11 of Other ESP32 So, in salve should be { 9, 13, 14, 11 } and in Master { 9, 11, 14, 13 }

//unsigned long currentTime = micros();
//unsigned long lastActionCycleTime;
constexpr unsigned long desiredDelay = 10;  // for data transsision. this delay is High and Low duration in mircosec for slave to be able to read data.

// Custom 4-Bit Communication through 4 Pins
void Initiate4BitComInMaster() {
  // Set the data pins as outputs
  for (int i = 0; i < 4; ++i) {
    pinMode(DATA_PINS[i], OUTPUT);
  }
  // Set the clock and data ready pins as outputs
  pinMode(CLOCK_PIN, OUTPUT);
  pinMode(DATA_Transmission_STATE_PIN, OUTPUT);
  digitalWrite(CLOCK_PIN, LOW);
  digitalWrite(DATA_Transmission_STATE_PIN, LOW);
}

void sendCharsToSlave(char* charToSend, int length) {
  digitalWrite(DATA_Transmission_STATE_PIN, HIGH);  // Call Slave to be ready

  // Serial.println("Sending data to slave:");
  // Serial.println(charToSend);


  for (int i = 0; i < length; ++i) {
    // Extract the lower 4 bits of the character
    uint8_t dataToSend = charTo4BitValue(charToSend[i]);

    //  // Print the data being sent
        //Serial.print(dataToSend);

    // Convert the 4-bit data to individual pin states
    bool pin1 = dataToSend & 0b0001;
    bool pin2 = dataToSend & 0b0010;
    bool pin3 = dataToSend & 0b0100;
    bool pin4 = dataToSend & 0b1000;
    sendByteToSlave(pin1, pin2, pin3, pin4);  // Send each byte in the array
  }
  digitalWrite(DATA_Transmission_STATE_PIN, LOW);
  delayMicroseconds(30);
}

uint8_t charTo4BitValue(char c) {
  if (c >= '0' && c <= '9') {
    return c - '0';  // '0' to '9' directly map to 0 to 9
  } else if (c == 'A') {
    return 0xA;  // 'A' maps to 10
  } else if (c == 'B') {
    return 0xB;  // 'B' maps to 11
  } else if (c == 'C') {
    return 0xC;  // 'C' maps to 12
  } else if (c == 'D') {
    return 0xD;  // 'D' maps to 13
  } else if (c == 'E') {
    return 0xE;  // 'E' maps to 14
  } else if (c == 'F') {
    return 0xF;  // 'F' maps to 15
  }
  return 0;  // Default case or undefined characters
}

void sendByteToSlave(bool pin1, bool pin2, bool pin3, bool pin4) {

  //currentTime = micros();

  // Set the bits on the data pins
  digitalWrite(DATA_PINS[0], pin1);
  digitalWrite(DATA_PINS[1], pin2);
  digitalWrite(DATA_PINS[2], pin3);
  digitalWrite(DATA_PINS[3], pin4);

  //   if ((unsigned long)(currentTime - lastActionCycleTime[i]) >= lowStateDuration[i]) {
  // Toggle the clock
  digitalWrite(CLOCK_PIN, HIGH);
  delayMicroseconds(desiredDelay);
  digitalWrite(CLOCK_PIN, LOW);
  delayMicroseconds(desiredDelay);
}

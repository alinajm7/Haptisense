#include <Arduino.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <freertos/semphr.h>
#include "esp_task_wdt.h"
// General Setup
constexpr int BaudRate = 250000; // Baud rate of serial port
constexpr int NumberOfPins = 29; // Number of pins that is used
constexpr int MAX_INPUT_LENGTH = 293; // Maximum input length, (((5 chars for lowStateDuration + 5 chars for highStateDuration)  * 29 pins) = 290)  + 1 starting char "A" + 1 ending char "E" + 1 for  \n newline
constexpr int DATA_CHUNK_LENGTH = 290; // Length of each data chunk (5 chars for lowStateDuration + 5 chars for highStateDuration)  * 29 pins) = 290)
constexpr char START_CHAR_DataToSlave = 0xA; // Char A
constexpr char END_CHAR_DataToSlave = 0xE; // Char E
constexpr unsigned long MinDuration = 1;      // 100 microseconds
constexpr unsigned long MaxDuration = 99999;  // (2^16)-1 = 65535 microseconds, almost 65 milliseconds



// Using GPIO pins on ESP32-S3
constexpr int pins[NumberOfPins] = { 1, 2, 3, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 26, 47, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46 };

struct pwmConfig {
  unsigned long lowStateDuration;
  unsigned long stateDuration;
  unsigned long lastActionCycleTime;
  bool pinLockState;
};

// Initialize all pins with the default configuration
pwmConfig PWM_Config[NumberOfPins] = {
  { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }, { 0, 0, 0, false }
};

bool pinState[NumberOfPins] = { false };

bool MPSON = true;

void setup() {
  // Set the CPU frequency to the highest available
  //setCpuFrequencyMhz(240);
  esp_task_wdt_init(4240, false);
  
  Serial.begin(BaudRate);
  InitializeAllPinsForMaster();
  Initiate4BitComInSlave();
  SetAllPinsLOW();

  //serialSemaphore = xSemaphoreCreateMutex();  // Create a semaphore for serial port access and shared index   (FOR shared part between Core 0 & 1)
  delay(500);
  xTaskCreatePinnedToCore(pWMSimulator, "PWMSimulator", 8192, NULL, configMAX_PRIORITIES - 1, NULL, 0);  // Task on Core 0

  // Info
  Serial.println(" ");
  Serial.println("HaptiSense V2.07 by AliNK");
  Serial.println("Type of connected board : SLAVE");
  Serial.println("Actuators Processing is ON. It can be turned ON and Off through command from MASTER ESP32");
}

void pWMSimulator(void* parameter) {  // Core 0
  while (true) {
    if (!MPSON) {
            ets_delay_us(1); // Minimal delay to prevent busy-waiting
            continue;        // Skip processing
        }
    RunLogicsForPWM();
    //vTaskDelay(1);  //This is 1 milli second delay
    ets_delay_us(1);  //This is 1 micro second delay
    esp_task_wdt_reset();        
  }
}

void loop() {  // Core 1 by default

  // // Check if there is any serial input to process
  // while (Serial.available() > 0) {
  //   char inChar = Serial.read();
  //   // Check for newline character or carriage return
  //   if (inChar == '\n' || bufferPosition >= MAX_INPUT_LENGTH - 1) {
  //     inputBuffer[bufferPosition] = '\0';  // Null-terminate the string
  //     handleSerialInput(inputBuffer);
  //     bufferPosition = 0;                        // Reset buffer position
  //     memset(inputBuffer, 0, MAX_INPUT_LENGTH);  // Clear the buffer to avoid data remnants
  //   } else if (inChar != '\r') {
  //     inputBuffer[bufferPosition++] = inChar;
  //   }
  // }
  ReadDataAndSetReceivedDataArray();
  esp_task_wdt_reset();
  //RunLogicsForPWM();
}

void InitializeAllPinsForMaster() {  // Set all pins as Output to control Actuators
                                     // Set all pins to OUTPUT and LOW
  for (int i = 0; i < NumberOfPins; i++) {
    pinMode(pins[i], OUTPUT);
  }
}

void SetAllPinsLOW() {
  // Set all pins to OUTPUT and LOW
  for (int i = 0; i < NumberOfPins; i++) {
    digitalWrite(pins[i], LOW);
  }
}

// Core 0 related Methods
void RunLogicsForPWM() {
    

    unsigned long currentTime = micros();

    for (int i = 0; i < NumberOfPins; i++) {
        pwmConfig& pinConfig = PWM_Config[i]; // Cache the reference

        if (pinConfig.pinLockState || pinConfig.stateDuration == 0) {
            if (pinState[i]) {
                digitalWrite(pins[i], LOW);
                pinState[i] = false;
            }
            continue; // Skip to the next pin
        }

        unsigned long elapsedTime = currentTime - pinConfig.lastActionCycleTime;

        if (!pinState[i]) {
            if (elapsedTime >= pinConfig.lowStateDuration) {
                digitalWrite(pins[i], HIGH);
                pinState[i] = true;
            }
        } else {
            if (elapsedTime >= pinConfig.stateDuration) {
                digitalWrite(pins[i], LOW);
                pinState[i] = false;
                pinConfig.lastActionCycleTime = currentTime;
            }
        }
    }
}



// Core 1 related Methods (reading from port happens here, LOOP)



void processLocalData(char* localInput) {
  for (int i = 0; i < NumberOfPins; i++) {
    int index = i * 10;
    char lowDurationStr[6] = { 0 };
    char highDurationStr[6] = { 0 };

    strncpy(lowDurationStr, localInput + index, 5);
    strncpy(highDurationStr, localInput + index + 5, 5);

    unsigned long lowDuration = strtoul(lowDurationStr, NULL, 10);
    unsigned long highDuration = strtoul(highDurationStr, NULL, 10);

    if (lowDuration == 0 || highDuration == 0) {
      PWM_Config[i].pinLockState = true;
      // Handle invalid input by setting durations to zero and turning off the pin
      PWM_Config[i].lowStateDuration = 0;
      PWM_Config[i].stateDuration = 0;
      //digitalWrite(pins[i], LOW);
      //pinState[i] = false;                // Ensure state array is updated
      PWM_Config[i].lastActionCycleTime = micros();  // Reset timing

      // Serial.print("Invalid input for pin ");
      // Serial.print(i);
      // Serial.println(". PWM disabled, values must be within range.");

      PWM_Config[i].pinLockState = false;

    } else if (lowDuration >= MinDuration && lowDuration <= MaxDuration && highDuration >= 0 && highDuration <= MaxDuration) {
      PWM_Config[i].pinLockState = true;
      PWM_Config[i].lowStateDuration = lowDuration;
      PWM_Config[i].stateDuration = lowDuration + highDuration;
      //PWM_Config[i].lastActionCycleTime = micros();

      // Serial.print("Pin ");
      // Serial.print(i);
      // Serial.print(" set: Low = ");
      // Serial.print(lowDuration);
      // Serial.print(", High = ");
      // Serial.println(highDuration);
      PWM_Config[i].pinLockState = false;
    } else {
      PWM_Config[i].pinLockState = true;
      // Handle invalid input by setting durations to zero and turning off the pin
      PWM_Config[i].lowStateDuration = 0;
      PWM_Config[i].stateDuration = 0;
      //digitalWrite(pins[i], LOW);
      //pinState[i] = false;                // Ensure state array is updated
      PWM_Config[i].lastActionCycleTime = micros();  // Reset timing

      // Serial.print("Invalid input for pin ");
      // Serial.print(i);
      // Serial.println(". PWM disabled, values must be within range.");

      PWM_Config[i].pinLockState = false;
    }
  }
}



// Data Transsision scripts

// Define pin numbers
constexpr  int CLOCK_PIN = 12;                    // GPIO Pin for the clock
constexpr  int DATA_Transmission_STATE_PIN = 10;  // GPIO Pin to indicate it is data transmission mode
constexpr  int DATA_PINS[] = { 9, 13, 14, 11 };   // GPIO Pins for 4-bit data *** Pin 13 is conencted to pin 11 of Other ESP32 So, in salve should be { 9, 13, 14, 11 } and in Master { 9, 11, 14, 13 }

//unsigned long currentTime = micros();
//unsigned long lastActionCycleTime;
constexpr  unsigned long desiredDelay = 30;  // for data transsision. this delay is High and Low duration in mircosec for slave to be able to read data.

static char receivedDataArray[DATA_CHUNK_LENGTH+1];  // Array to store received data
int receivedDataIndex = 0;                     // Index to keep track of the next position in the array
static bool isNewDataComingEnded = true;
static bool isRecording = false;            // Flag to indicate whether we are recording data

// Custom 4-Bit Communication through 4 Pins
void Initiate4BitComInSlave() {
  // Set the data pins as input for SLAVE
  for (int i = 0; i < 4; ++i) {
    pinMode(DATA_PINS[i], INPUT);
  }
  // Set the clock and data ready pins as outputs
  pinMode(CLOCK_PIN, INPUT);
  pinMode(DATA_Transmission_STATE_PIN, INPUT);
}

void ReadDataAndSetReceivedDataArray() {

  while (digitalRead(DATA_Transmission_STATE_PIN) == HIGH) {  // When Master calls Slave by DATA_Transmission_STATE_PIN

    uint8_t receivedData;
    // Wait for the clock to go high, then read first 4 bits
    while (digitalRead(CLOCK_PIN) == LOW) {}  // wait until CLK get HIGH
    delayMicroseconds(3); // small delay to read stabilized value
    receivedData = read4BitData();

    // Check to find begining and ending flag and managethem
    if (receivedData == START_CHAR_DataToSlave) {
      isRecording = true;                           // Start recording data
      receivedDataIndex = 0;                        // Reset index at the start of a new message
      memset(receivedDataArray, 0, DATA_CHUNK_LENGTH+1);  // Clear the array at the start of a new message
      continue;                                     // Skip the rest of the loop
    } else if (receivedData == END_CHAR_DataToSlave) {
      if (isRecording) {
        isRecording = false;                          // Stop recording data
        receivedDataArray[receivedDataIndex] = '\0';  // Ensure null termination
        //Serial.println(receivedDataArray);            // Print the complete received data
        processLocalData(receivedDataArray);  // Processing and setting pins values
      }
      continue;  // Skip the rest of the loop
    }


    if (isRecording && receivedDataIndex < DATA_CHUNK_LENGTH+1) {  // Check to prevent buffer overflow

      receivedDataArray[receivedDataIndex] = nibbleToHexCharacter(receivedData);
      // Handle the first character specifically for ON/OFF commands
      if (receivedDataIndex == 0) {  // Check right after the first character is recorded
        if (receivedDataArray[0] == 'B') {
          MPSON = true;  // Turn ON the Manual PWM Simulation
          //Serial.println("Receiving Data is ON for Slave");
        } else if (receivedDataArray[0] == 'F') {
          MPSON = false;  // Turn OFF the Manual PWM Simulation
          //Serial.println("Receiving Data is OFF for Slave");
        }
      }

      receivedDataIndex++;  // Increment the index after handling
    }

    while (digitalRead(CLOCK_PIN) == HIGH) {}  // wait until CLK get LOW

    // Output the received data
  }
}

uint8_t read4BitData() {
  uint8_t data = 0;
  // Read the bits from the data pins
  for (int i = 0; i < 4; ++i) {
    data |= digitalRead(DATA_PINS[i]) << i;
  }
  return data;
}
char nibbleToHexCharacter(uint8_t nibble) {
  if (nibble < 10) {
    return '0' + nibble;  // For values 0-9, return the corresponding character '0'-'9'
  } else {
    return 'A' + (nibble - 10);  // For values 10-15, return 'A'-'F'
  }
}

